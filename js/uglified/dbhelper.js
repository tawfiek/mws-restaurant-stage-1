function openIndexedDB(){if(!1 in navigator)return;indexedDB=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB,indexedDB||console.error("Your browser doesn't support a stable version of IndexedDB. Such and such feature will not be available.");const e=indexedDB.open("restaurants",2);return e.onupgradeneeded=function(e){idb=e.target.result,idb.createObjectStore("restaurant",{keyPath:"id"}),idb.createObjectStore("reviews",{keyPath:"id"})},e}"serviceWorker"in navigator&&window.addEventListener("load",function(){navigator.serviceWorker.register("/js/uglified/sw.js").then(function(e){console.log("ServiceWorker registration successful with scope: ",e.scope)},function(e){console.log("ServiceWorker registration failed: ",e)})});class DBHelper{static get DATABASE_URL(){return"https://mws-backend.herokuapp.com/restaurants"}static get DATABASE_FOR_REVIEWS(){return"https://mws-backend.herokuapp.com/reviews"}static fetchRestaurants(e){let t=new XMLHttpRequest;const r=openIndexedDB();r.onsuccess=(t=>{const r=t.target.result.transaction("restaurant").objectStore("restaurant").getAll();r.onsuccess=(()=>{r.result&&(console.log(r.result),e(null,r.result))})}),t.open("GET",DBHelper.DATABASE_URL),t.onload=(()=>{if(200===t.status){const n=JSON.parse(t.responseText);r.onsuccess=(e=>{const t=e.target.result.transaction("restaurant","readwrite").objectStore("restaurant");n.forEach(e=>{t.add(e)})}),r.onerror=(e=>{console.error("IDB is not opened")}),e(null,n)}else{const r=`Request failed. Returned status of ${t.status}`;e(r,null)}}),t.send()}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.find(t=>t.id==e);r?t(null,r):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((n,s)=>{if(n)r(n,null);else{let n=s;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,n)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph}`}static imgSetUrlForRestaurantSmall(e){return`/images/${e.id}-small_1x.jpg 1x,/images/${e.id}-small_2x.jpg 2x`}static imgSetUrlForRestaurantLarg(e){return`/images/${e.id}-larg_1x.jpg 1x,/images/${e.id}-larg_2x.jpg 2x`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static changeFavoriteStatus(e,t){fetch(`${DBHelper.DATABASE_URL}/${e}/?is_favorite=${t}`,{method:"PUT"}).then(()=>{openIndexedDB().onsuccess=(r=>{const n=r.target.result.transaction("restaurant","readwrite").objectStore("restaurant");n.get(e).onsuccess=(e=>{const r=e.target.result;console.log(r),r.is_favorite=t,n.put(r)})})})}static featchRestuarantReviews(e){return fetch(`${DBHelper.DATABASE_FOR_REVIEWS}/?restaurant_id=${e}`).then(e=>e.json()).then(e=>{return openIndexedDB().onsuccess=(t=>{const r=t.target.result.transaction("reviews","readwrite").objectStore("reviews");Array.isArray(e)?e.forEach(e=>{r.put(e)}):r.put(e)}),e})}static getStoredbjectsById(e,t,r){openIDB.onsuccess=(n=>{const s=n.target.result;if(s)return s.transaction(e).objectStore(e).index(t).getAll(r)})}static addReview(e){const t={name:"addReview",data:e,object_type:"review"};return console.log(!navigator.onLine,"online"),navigator.onLine?DBHelper.sendReview(e):(DBHelper.sendReviewWhenOnline(t),Promise.reject(t))}static sendReview(e){const t={name:e.name,rating:parseInt(e.rating),comments:e.comments,restaurant_id:parseInt(e.restaurant_id)},r={method:"POST",body:JSON.stringify(t)};return fetch(`${DBHelper.DATABASE_FOR_REVIEWS}`,r)}static sendReviewWhenOnline(e){console.log("event Listin"),localStorage.setItem("reviews",JSON.stringify(e.data)),window.addEventListener("online",e=>{console.log("Now I am Online ...... ");const t=JSON.parse(localStorage.getItem("reviews"));document.querySelectorAll(".reviews-offline").forEach(e=>{e.classList.remove("reviews-offline"),e.removeChild(document.getElementById("offline-lable"))}),t&&DBHelper.addReview(t),localStorage.removeItem("reviews")})}}